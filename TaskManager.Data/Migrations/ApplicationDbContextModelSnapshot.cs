// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskManager.Data.DbContexts;

#nullable disable

namespace TaskManager.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ApplicationUserErrand", b =>
                {
                    b.Property<long>("ErrandsId")
                        .HasColumnType("bigint");

                    b.Property<long>("UsersId")
                        .HasColumnType("bigint");

                    b.HasKey("ErrandsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ApplicationUserErrand");
                });

            modelBuilder.Entity("TaskManager.Core.Models.Data.ApplicationRole", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Name = "Завідувач"
                        },
                        new
                        {
                            Name = "Викладач"
                        },
                        new
                        {
                            Name = "Лаборант"
                        });
                });

            modelBuilder.Entity("TaskManager.Core.Models.Data.ApplicationUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleName");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TaskManager.Core.Models.Data.Category", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Name = "Лекція"
                        },
                        new
                        {
                            Name = "Інше"
                        });
                });

            modelBuilder.Entity("TaskManager.Core.Models.Data.Errand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReportFormatName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ReportId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Started")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryName");

                    b.HasIndex("ReportFormatName");

                    b.HasIndex("ReportId")
                        .IsUnique()
                        .HasFilter("[ReportId] IS NOT NULL");

                    b.ToTable("Errands");
                });

            modelBuilder.Entity("TaskManager.Core.Models.Data.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ErrandId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastChanged")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("TaskManager.Core.Models.Data.ReportFormat", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("ReportFormats");

                    b.HasData(
                        new
                        {
                            Name = "Файл"
                        },
                        new
                        {
                            Name = "Email"
                        });
                });

            modelBuilder.Entity("TaskManager.Core.Models.Data.UploadedFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AnswerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("ApplicationUserErrand", b =>
                {
                    b.HasOne("TaskManager.Core.Models.Data.Errand", null)
                        .WithMany()
                        .HasForeignKey("ErrandsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManager.Core.Models.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskManager.Core.Models.Data.ApplicationUser", b =>
                {
                    b.HasOne("TaskManager.Core.Models.Data.ApplicationRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TaskManager.Core.Models.Data.Errand", b =>
                {
                    b.HasOne("TaskManager.Core.Models.Data.Category", "Category")
                        .WithMany("Errands")
                        .HasForeignKey("CategoryName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManager.Core.Models.Data.ReportFormat", "ReportFormat")
                        .WithMany("Errands")
                        .HasForeignKey("ReportFormatName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManager.Core.Models.Data.Report", "Report")
                        .WithOne("Errand")
                        .HasForeignKey("TaskManager.Core.Models.Data.Errand", "ReportId");

                    b.Navigation("Category");

                    b.Navigation("Report");

                    b.Navigation("ReportFormat");
                });

            modelBuilder.Entity("TaskManager.Core.Models.Data.UploadedFile", b =>
                {
                    b.HasOne("TaskManager.Core.Models.Data.Report", null)
                        .WithMany("Files")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TaskManager.Core.Models.Data.Category", b =>
                {
                    b.Navigation("Errands");
                });

            modelBuilder.Entity("TaskManager.Core.Models.Data.Report", b =>
                {
                    b.Navigation("Errand")
                        .IsRequired();

                    b.Navigation("Files");
                });

            modelBuilder.Entity("TaskManager.Core.Models.Data.ReportFormat", b =>
                {
                    b.Navigation("Errands");
                });
#pragma warning restore 612, 618
        }
    }
}
